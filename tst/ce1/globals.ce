#define KEY <(),(),(),()>
#define KEYS List([KEY \, String])
var@ keys: KEYS =
    new <.1 [[<.1>,string_c2ce _("pass")],
    new <.1 [[<.2>,string_c2ce _("set")],
    new <.1 [[<.3>,string_c2ce _("var")],
    new <.1 [[<.4>,string_c2ce _("func")],
        <.0>]>]>]>]>

var@ finp: _(FILE*) = ?
var@ tk0: Token = <.1>
var@ tk1: Token = <.1>

var@ keys_find: \\String->Maybe(KEY) = func \\String->Maybe(KEY) {
    var@ aux: [\\String,\\KEYS]->Maybe(KEY) = func [\\String,\\KEYS]->Maybe(KEY) {
        if (/arg.2)?0 {
            return <.1>
        }
        if string_eq [borrow arg.1, borrow \\(/arg.2)!1.1.2] {
            return <.2 (/arg.2)!1.1.1>
        }
        return aux [borrow arg.1, borrow \\(/arg.2)!1.2]
    }
    return aux [borrow arg, borrow \\keys]
}
